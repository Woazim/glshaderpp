# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
variables:
  GIT_SSL_NO_VERIFY: '1'
  GIT_SUBMODULE_STRATEGY: recursive
stages:
- build
- test
- deploy
- review
- dast
- staging
- canary
- production
- incremental rollout 10%
- incremental rollout 25%
- incremental rollout 50%
- incremental rollout 100%
- performance
- cleanup
docker-build:
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
  cache:
    key:
      files:
      - conanfile.in
    paths:
    - .conan
    when: always
  artifacts:
    paths:
    - install
    - build
    - build-gcov
  stage: build
  services:
  - docker:dind
  before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      tag=""
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
      tag=":$CI_COMMIT_REF_SLUG"
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
  - docker pull $CI_REGISTRY_IMAGE${tag} || true
  - docker build --cache-from $CI_REGISTRY_IMAGE${tag} --tag $CI_REGISTRY_IMAGE${tag} .
  - docker create --name glshaderpp_container "$CI_REGISTRY_IMAGE${tag}"
  - docker cp glshaderpp_container:/home/conan/.conan ./.conan
  - docker cp glshaderpp_container:/home/conan/glshaderPP/install ./install
  - docker cp glshaderpp_container:/home/conan/glshaderPP/build ./build
  - docker cp glshaderpp_container:/home/conan/glshaderPP/build-gcov ./build-gcov
  - docker container rm glshaderpp_container
  - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
  - if: "$CI_COMMIT_BRANCH"
    exists:
    - Dockerfile
docker-test:
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
    GIT_STRATEGY: none
  artifacts:
    paths:
    - testProg_coverage
  stage: test
  coverage: '/^lines: \d+\.\d+/'
  dependencies:
    - docker-build
  services:
  - docker:dind
  before_script:
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
  - |
    if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
      tag=""
      echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
    else
      tag=":$CI_COMMIT_REF_SLUG"
      echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
    fi
  - docker pull $CI_REGISTRY_IMAGE${tag}
  - docker run --rm $CI_REGISTRY_IMAGE${tag} sh -c "Xvfb& cd build && NBPROCS=`cat /proc/cpuinfo | grep processor | wc -l` && ctest -j $NBPROCS"
  - docker run --name glshaderpp_test_container $CI_REGISTRY_IMAGE${tag} sh -c "Xvfb& cd build-gcov/test && NBPROCS=`cat /proc/cpuinfo | grep processor | wc -l` && ctest -j $NBPROCS && mkdir testProg_coverage && gcovr --html testProg_coverage/index.html --html-details -r /home/conan/glshaderPP -e "/home/conan/glshaderPP/test/*" --object-directory=/home/conan/glshaderPP/build-gcov/test -s"
  - docker cp glshaderpp_test_container:/home/conan/glshaderPP/build-gcov/test/testProg_coverage ./testProg_coverage
  - docker container rm glshaderpp_test_container
docker-deploy:
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
    GIT_STRATEGY: none
  stage: deploy
  dependencies:
    - docker-build
  artifacts:
    paths:
    - install
  script: echo Does nothing
sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
